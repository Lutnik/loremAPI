{"version":3,"sources":["webpack:///./src/pages/api.js"],"names":["API","appUrl","codeStyle","fontWeight","background","padding","borderRadius","spanStyle","fontFamily","fontSize","display","width","marginRight","title","style","marginBottom","height"],"mappings":"6FAAA,wDAoEeA,UA/DH,WACV,IAAMC,EAAS,6BACTC,EAAY,CAChBC,WAAY,IACZC,WAAY,2BACZC,QAAS,cACTC,aAAc,SAEVC,EAAY,CAChBC,WAAY,YACZJ,WAAY,2BACZK,SAAU,QACVC,QAAS,eACTC,MAAO,MACPC,YAAa,SAGf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,eACX,wBAAIC,MAAO,CAAEC,aAAc,IAA3B,OACA,iCACE,oHACA,0BAAMD,MAAOZ,GAAeD,EAA5B,gCACA,6BACA,0BAAMa,MAAO,CAAEL,SAAU,UAAzB,sFAGA,yGAEE,6BAFF,oCAIE,6BACA,6BALF,kCAQA,0BAAMK,MAAOZ,GAAb,SAEGD,EAFH,0BAIE,6BAJF,+BAME,6BANF,oCASA,qDACA,0BAAMa,MAAOZ,GAAb,sCACA,2BACE,0BAAMY,MAAOP,GAAb,UADF,wEAGE,6BACA,0BAAMO,MAAOP,GAAb,SAJF,sCAME,6BACA,0BAAMO,MAAOP,GAAb,QAPF,oCAWF,uBAAGO,MAAO,CAAEE,OAAQ,SAApB","file":"component---src-pages-api-js-a1ed8dd32c98bff119ba.js","sourcesContent":["import React from 'react';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nconst API = () => {\n  const appUrl = 'https://lorem-slunskum.pl/';\n  const codeStyle = {\n    fontWeight: 600,\n    background: 'rgba(255, 255, 255, 0.6)',\n    padding: '0.2em 0.5em',\n    borderRadius: '0.2em',\n  };\n  const spanStyle = {\n    fontFamily: 'monospace',\n    background: 'rgba(255, 255, 255, 0.6)',\n    fontSize: 'large',\n    display: 'inline-block',\n    width: '4em',\n    marginRight: '0.5em',\n  };\n\n  return (\n    <Layout>\n      <SEO title=\"Detale API\" />\n      <h2 style={{ marginBottom: 0 }}>API</h2>\n      <section>\n        <p>Chcesz skorzystać z otwartego API? Nic prostszego! Pobieraj dane z poniższego adresu:</p>\n        <code style={codeStyle}>{`${appUrl}api/paragraphs/XXX/words/YYY`}</code>\n        <br />\n        <span style={{ fontSize: 'small' }}>\n          (XXX to liczba paragrafów (1 - 5), a YYY to liczba słów w każdym z nich (1 - 100))\n        </span>\n        <p>\n          API wygeneruje za każdym razem losowy tekst z bazy danych ponad 10000 słów.\n          <br />\n          Odpowiedż będzie w formacie JSON.\n          <br />\n          <br />\n          Przykład zapytania/odpowiedzi:\n        </p>\n        <code style={codeStyle}>\n          fetch(\n          {appUrl}\n          /paragraphs/3/words/50)\n          <br />\n          &nbsp;&nbsp;.then(data =&gt; data.json())\n          <br />\n          &nbsp;&nbsp;.then(res =&gt; console.log(res))\n        </code>\n        <p> Dostarczy odpowiedź: </p>\n        <code style={codeStyle}> Object &#123; status, error, body[] &#125; </code>\n        <p>\n          <span style={spanStyle}>status</span>\n          to 200, jeśli udało się pobrać dane, lub 4XX, jeśli wystąpił problem.\n          <br />\n          <span style={spanStyle}>error</span>\n          zawiera treść błędu, jeśli wystąpił\n          <br />\n          <span style={spanStyle}>body</span>\n          to tablica paragrafów (string).\n        </p>\n      </section>\n      <p style={{ height: '50px' }}> </p>\n    </Layout>\n  );\n};\n\nexport default API;\n"],"sourceRoot":""}